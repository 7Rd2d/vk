using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace VkNet.SourceGenerator
{
	[Generator]
	public class VkResponseToAttachmentsGenerator : ISourceGenerator
	{
		/// <inheritdoc />
		public void Initialize(GeneratorInitializationContext context)
		{
			context.RegisterForSyntaxNotifications(() => new VkResponseToAttachmentsReceiver());
		}

		/// <inheritdoc />
		public void Execute(GeneratorExecutionContext context)
		{
			if (context.SyntaxReceiver is not VkResponseToAttachmentsReceiver receiver)
			{
				return;
			}

			var sb = new StringBuilder();
			sb.AppendLine("// DO NOT EDIT THIS FILE CAUSE ALL CHANGES WILL BE DELETED AUTOMATICALLY");
			sb.AppendLine();

			foreach (var usingName in receiver.CandidateUsingList)
			{
				sb.AppendLine($"using {usingName};");
			}

			sb.AppendLine();
			sb.AppendLine("namespace VkNet.Utils");
			sb.AppendLine("{");
			sb.AppendLine("\tpublic partial class VkResponse");
			sb.AppendLine("\t{");

			foreach (var s in receiver.CandidateClasses.Distinct())
			{
				sb.AppendLine("\t\t/// <summary>");
				sb.AppendLine($"\t\t/// Преобразовать <see cref=\"{s}\" /> из <see cref=\"VkResponse\" />");
				sb.AppendLine("\t\t/// </summary>");
				sb.AppendLine("\t\t/// <param name=\"response\"> Ответ сервера vk.com. </param>");
				sb.AppendLine("\t\t/// <returns>");
				sb.AppendLine($"\t\t/// Результат преобразования в <see cref=\"{s}\" />.");
				sb.AppendLine("\t\t/// </returns>");
				sb.AppendLine($"\t\tpublic static implicit operator {s}(VkResponse response)");
				sb.AppendLine("\t\t{");

				sb.AppendLine($"\t\t\treturn response?._token == null || !response._token.HasValues ? null : {s}.FromJson(response);");

				sb.AppendLine("\t\t}");
				sb.AppendLine();
			}

			sb.AppendLine("\t}");
			sb.AppendLine("}");

			context.AddSource($"{nameof(VkResponseToAttachmentsGenerator)}.g.cs",
				SourceText.From(sb.ToString(), Encoding.UTF8));
		}
	}
}