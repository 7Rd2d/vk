using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace VkNet.SourceGenerator
{
	[Generator]
	public class VkResponseToSafetyEnumCastGenerator : ISourceGenerator
	{
		/// <inheritdoc />
		public void Initialize(GeneratorInitializationContext context)
		{
			context.RegisterForSyntaxNotifications(() => new VkResponseToSafetyEnumCastReceiver());
		}

		/// <inheritdoc />
		public void Execute(GeneratorExecutionContext context)
		{
			var sb = new StringBuilder();
			sb.AppendLine("// DO NOT EDIT THIS FILE CAUSE ALL CHANGES WILL BE DELETED AUTOMATICALLY");
			sb.AppendLine();
			sb.AppendLine("using VkNet.Enums.Filters;");
			sb.AppendLine("using VkNet.Enums.SafetyEnums;");
			sb.AppendLine();
			sb.AppendLine("namespace VkNet.Utils");
			sb.AppendLine("{");
			sb.AppendLine("\tpublic partial class VkResponse");
			sb.AppendLine("\t{");

			if (context.SyntaxReceiver is VkResponseToSafetyEnumCastReceiver receiver)
			{
				foreach (var s in receiver.CandidateClasses)
				{
					sb.AppendLine("\t\t/// <summary>");
					sb.AppendLine("\t\t/// Преобразовать из VkResponse");
					sb.AppendLine("\t\t/// </summary>");
					sb.AppendLine("\t\t/// <param name=\"response\"> Ответ. </param>");
					sb.AppendLine("\t\t/// <returns>");
					sb.AppendLine("\t\t/// Результат преобразования.");
					sb.AppendLine("\t\t/// </returns>");
					sb.AppendLine($"\t\tpublic static implicit operator {s}(VkResponse response)");
					sb.AppendLine("\t\t{");
					sb.AppendLine($"\t\t\treturn response == null ? null : {s}.FromJson(response: response);");
					sb.AppendLine("\t\t}");
				}
			}

			sb.AppendLine("\t}");
			sb.AppendLine("}");
			context.AddSource($"{nameof(VkResponseToSafetyEnumCastGenerator)}.g.cs",
				SourceText.From(sb.ToString(), Encoding.UTF8));
		}
	}
}